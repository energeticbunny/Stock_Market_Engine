## Server stats

    @commands.command(name="server_stats", help="Display server statistics.")
    async def server_stats(self, ctx):
        # Get the amount of servers the bot is a member of
        server_count = len(self.bot.guilds)

        # Get the amount of users with stored P3 addresses
        address_count = await self.get_user_count()

        # Get the size of currency_system.db, p3ledger.db, and P3addr.db
        db_sizes = {
            "currency_system.db": self.get_file_size("currency_system.db"),
            "p3ledger.db": self.get_file_size("p3ledger.db"),
            "P3addr.db": self.get_file_size("P3addr.db"),
        }

        # Get the number of lines in cogs/currency_system_cog.py
        cog_lines = self.get_file_lines("cogs/currency_system_cog.py")

        # Create and send an embed with the information
        embed = discord.Embed(title="Server Statistics", color=discord.Color.green())
        embed.add_field(name="Servers", value=server_count)
        embed.add_field(name="P3 Addresses", value=address_count)
        embed.add_field(name="Lines in currency_system", value=cog_lines)
        for db_name, db_size in db_sizes.items():
            embed.add_field(name=f"Size of {db_name}", value=db_size)

        await ctx.send(embed=embed)

    async def get_user_count(self):
        try:
            P3conn = sqlite3.connect("P3addr.db")
            cursor = P3conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_addresses")
            count = cursor.fetchone()[0]
            return count
        except Exception as e:
            print(f"Error getting user count: {e}")
            return "Error"

    def get_file_size(self, filename):
        try:
            size = os.path.getsize(filename)
            return self.format_size(size)
        except Exception as e:
            print(f"Error getting file size for {filename}: {e}")
            return "Error"

    def format_size(self, size):
        # Format size in a human-readable format
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if size < 1024.0:
                break
            size /= 1024.0
        return f"{size:,.2f} {unit}"

    def get_file_lines(self, filename):
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                lines = file.readlines()
                return len(lines)
        except Exception as e:
            print(f"Error getting file lines for {filename}: {e}")
            return "Error"
