async def update_market_etf_price(bot, conn):
    guild_id = 1087147399371292732 # Hardcoded guild ID
    channel_id = 1161706930981589094  # Hardcoded channel ID
    guild = ctx.bot.get_guild(GUILD_ID)
    channel = get(guild.voice_channels, id=channel_id)

    if channel:
        etf_value = await get_etf_value(self, ctx, 6)  # Replace 6 with the ID of the "Market ETF"
        if etf_value is not None:
            await channel.edit(name=f"Market ETF: {etf_value:,.2f} ")


async def get_etf_shares(self, ctx, etf_id):
    etf_shares = 0
    stocks = await get_etf_stocks(self, etf_id)
    for stock in stocks:
        result = await get_supply_stats(self, ctx, stock)
        reserve, total, locked, escrow, market, circulating = result

        etf_shares += locked
    print(f"ETF Shares {etf_shares:,.0f}")
    return etf_shares

async def get_etf_value(self, ctx, etf_id):

    etf_value = 0
    metal_value = 0
    stocks = await get_etf_stocks(self, etf_id)
    for stock in stocks:
        etf_value += await get_stock_price(self, ctx, stock)


    if etf_id == 6:
        for item_name in self.metals:
            current_price, current_value, reserve_supply, circulating, total_supply = await self.item_supply_info(ctx, item_name)
            metal_value += current_price
            etf_value = metal_value + etf_value
    return etf_value


async def get_etf_stocks(self, etf_id):
    cursor = self.conn.cursor()
    cursor.execute("SELECT symbol FROM etf_stocks WHERE etf_id=?", (etf_id,))

    # Fetch all rows and extract symbols
    symbols = [row["symbol"] for row in cursor.fetchall()]

    return symbols

async def get_total_shares_in_orders(self, symbol):
    try:
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT SUM(quantity) as total_shares
            FROM limit_orders
            WHERE symbol = ? AND (order_type = 'sell' OR order_type = 'buy')
        """, (symbol,))

        result = cursor.fetchone()

        return result['total_shares'] if result and result['total_shares'] else 0

    except sqlite3.Error as e:
        print(f"An error occurred while fetching total shares in orders: {e}")
        return 0


async def get_total_shares_in_escrow_all_stocks(self):
    try:
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT SUM(quantity) as total_shares
            FROM limit_orders
            WHERE order_type IN ('sell', 'buy')
        """)

        result = cursor.fetchone()

        if result and result['total_shares']:
            return result['total_shares']
        else:
            return 0
    except sqlite3.Error as e:
        print(f"An error occurred while fetching total shares in escrow for all stocks: {e}")
        return 0

async def get_total_shares_in_escrow_user(self, user_id):
    try:
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT SUM(quantity) as total_shares
            FROM limit_orders
            WHERE user_id = ? AND (order_type = 'sell' OR order_type = 'buy')
        """, (user_id,))

        result = cursor.fetchone()

        if result and result['total_shares']:
            return result['total_shares']
        else:
            return 0
    except sqlite3.Error as e:
        print(f"An error occurred while fetching total shares in escrow for user {user_id}: {e}")
        return 0

async def reward_stock_holder_auto(self, ctx, user_id: int, stock_symbol: str, staking_yield: float):
    cursor = self.conn.cursor()

    try:
        # Check if the specified user holds the specified stock
        cursor.execute("SELECT amount FROM user_stocks WHERE user_id=? AND symbol=?", (user_id, stock_symbol))
        user_stock_holding = cursor.fetchone()

        if user_stock_holding is None:
            return 0

        amount_held = user_stock_holding[0]

        if amount_held == 0:
            return 0

        # Calculate the reward (staking_yield% of the held amount)
        reward_shares = round(amount_held * staking_yield)


        # Update the user's stock holdings with the rewarded shares
        addrDB = sqlite3.connect("P3addr.db")
        P3Addr = get_p3_address(addrDB, user_id)
        result = await get_supply_stats(self, ctx, stock_symbol)
        reserve, total, locked, escrow, market, circulating = result
        await self.mint_stock_supply(ctx, stock_symbol, reward_shares, False)
        await self.give_stock(ctx, P3Addr, stock_symbol, reward_shares, False)

        return reward_shares

    except Exception as e:
        print(f"An error occurred: {e}")
        await ctx.send("An error occurred during the reward distribution. Please try again later.")




def get_top_ten_users(conn):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT
            u.user_id,
            SUM(COALESCE(u.balance, 0)) AS wallet_balance,
            SUM(COALESCE(us.amount * s.price, 0)) AS stock_balance,
            SUM(COALESCE(ue.quantity * e.value, 0)) AS etf_balance,
            SUM(COALESCE(u.balance, 0) + COALESCE(us.amount * s.price, 0) + COALESCE(ue.quantity * e.value, 0)) AS total_balance
        FROM
            users AS u
        LEFT JOIN
            user_stocks AS us ON u.user_id = us.user_id
        LEFT JOIN
            stocks AS s ON us.symbol = s.symbol
        LEFT JOIN
            user_etfs AS ue ON u.user_id = ue.user_id
        LEFT JOIN
            etfs AS e ON ue.etf_id = e.etf_id
        GROUP BY
            u.user_id
        ORDER BY
            total_balance DESC
        LIMIT 10
    """)

    top_ten_users = cursor.fetchall()
    return top_ten_users

def get_current_week():
    return (datetime.date.today() - datetime.date(2023, 1, 1)).days // 7

async def get_ticket_data(conn, user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT quantity, timestamp FROM raffle_tickets WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

async def update_ticket_data(conn, user_id, quantity, timestamp):
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO raffle_tickets (user_id, quantity, timestamp) VALUES (?, ?, ?)", (user_id, quantity, timestamp))

async def delete_expired_tickets(conn):
    week = get_current_week()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM raffle_tickets WHERE week < ?", (week,))
    conn.commit()



# Function to format y-axis as currency
def currency_formatter(x, pos):
    return f"${x:,.2f}"

## Begin Ledger

# Register a custom adapter for decimal.Decimal
sqlite3.register_adapter(Decimal, lambda d: str(d))


# Function to create a connection to the SQLite database
def create_connection():
    return sqlite3.connect("p3ledger.db")

ledger_conn = create_connection()

async def log_transaction(ledger_conn, ctx, action, symbol, quantity, pre_tax_amount, post_tax_amount, balance_before, balance_after, price, verbose):
    # Get the user's username from the context
    if balance_before == 0 and balance_after == 0:
        P3Addr = "P3:03da907038"
    else:
        username = ctx.author.name
        P3Addr = generate_crypto_address(ctx.author.id)

    # Batch convert Decimal values to strings
    values_to_string = lambda *values: [str(value) for value in values]
    pre_tax_amount_str, post_tax_amount_str, balance_before_str, balance_after_str, price_str = values_to_string(
        pre_tax_amount, post_tax_amount, balance_before, balance_after, price
    )

    # Convert Decimal values to strings
    pre_tax_amount_str = str(pre_tax_amount)
    post_tax_amount_str = str(post_tax_amount)
    balance_before_str = str(balance_before)
    balance_after_str = str(balance_after)
    price_str = '{:,.11f}'.format(price) if symbol.lower() == "roflstocks" else '{:,.2f}'.format(price)

    # Create a timestamp for the transaction
    timestamp = ctx.message.created_at.strftime("%Y-%m-%d %H:%M:%S")

    # Insert the transaction into the stock_transactions table
    cursor = ledger_conn.cursor()
    cursor.execute("""
        INSERT INTO stock_transactions (user_id, action, symbol, quantity, pre_tax_amount, post_tax_amount, balance_before, balance_after, price)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (ctx.author.id, action, symbol, quantity, pre_tax_amount_str, post_tax_amount_str, balance_before_str, balance_after_str, price_str))
    ledger_conn.commit()

    if verbose == "True":
        # Determine whether it's a stock or ETF transaction
        is_etf = True if action in ["Buy ETF", "Sell ETF"] else False

        # Replace GUILD_ID with the actual ID of your guild
        guild_id = 1161678765894664323
        guild = ctx.bot.get_guild(guild_id)

        if guild:
            # Replace CHANNEL_ID with the actual ID of your logging channels
            channel1_id = ledger_channel

            # Get the channels from the guild
            channel1 = guild.get_channel(channel1_id)

            if channel1:
                # Create an embed for the log message
                embed = discord.Embed(
                    title=f"{P3Addr} {action} {symbol} {'ETF' if is_etf else 'Stock'} Transaction",
                    description=f"Quantity: {quantity:,.0f}\n"
                                f"Price: {price:,.2f} $QSE\n"
                                f"Pre-Gas Amount: {pre_tax_amount:,.2f} $QSE\n"
                                f"Post-Gas Amount: {post_tax_amount:,.2f} $QSE\n"
                                f"Balance Before: {balance_before:,.2f} $QSE\n"
                                f"Balance After: {balance_after:,.2f} $QSE\n"
                                f"Timestamp: {timestamp}",
                    color=discord.Color.green() if action.startswith("Buy") else discord.Color.red()
                )

                # Send the log message as an embed to the specified channels
                await channel1.send(embed=embed)



async def mint_to_reserve(self, ctx, amount: int):
    current_balance = get_user_balance(self.conn, PBot)
    new_balance = current_balance + amount
    await update_user_balance(self.conn, PBot, new_balance)

async def log_order_transaction(ledger_conn, ctx, action, symbol, quantity, pre_tax_amount, post_tax_amount, balance_before, balance_after, price, verbose, userid):
    # Get the user's username from the context
    if balance_before == 0 and balance_after == 0:
        P3Addr = "P3:03da907038"
    else:
#        username = ctx.author.name
        P3Addr = generate_crypto_address(userid)

    # Batch convert Decimal values to strings
    values_to_string = lambda *values: [str(value) for value in values]
    pre_tax_amount_str, post_tax_amount_str, balance_before_str, balance_after_str, price_str = values_to_string(
        pre_tax_amount, post_tax_amount, balance_before, balance_after, price
    )

    # Convert Decimal values to strings
    pre_tax_amount_str = str(pre_tax_amount)
    post_tax_amount_str = str(post_tax_amount)
    balance_before_str = str(balance_before)
    balance_after_str = str(balance_after)
    price_str = '{:,.11f}'.format(price) if symbol.lower() == "roflstocks" else '{:,.2f}'.format(price)

    # Create a timestamp for the transaction
    timestamp = ctx.message.created_at.strftime("%Y-%m-%d %H:%M:%S")

    # Insert the transaction into the stock_transactions table
    cursor = ledger_conn.cursor()
    cursor.execute("""
        INSERT INTO stock_transactions (user_id, action, symbol, quantity, pre_tax_amount, post_tax_amount, balance_before, balance_after, price)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (userid, action, symbol, quantity, pre_tax_amount_str, post_tax_amount_str, balance_before_str, balance_after_str, price_str))
    ledger_conn.commit()

    if verbose == "True":
        # Determine whether it's a stock or ETF transaction
        is_etf = True if action in ["Buy ETF", "Sell ETF"] else False

        # Replace GUILD_ID with the actual ID of your guild
        guild_id = 1161678765894664323
        guild = ctx.bot.get_guild(guild_id)

        if guild:
            # Replace CHANNEL_ID with the actual ID of your logging channels
            channel1_id = ledger_channel

            # Get the channels from the guild
            channel1 = guild.get_channel(channel1_id)

            if channel1:
                # Create an embed for the log message
                embed = discord.Embed(
                    title=f"{P3Addr} {action} {symbol} {'ETF' if is_etf else 'Stock'} Transaction",
                    description=f"Quantity: {quantity}\n"
                                f"Price: {price} $QSE\n"
                                f"Pre-Gas Amount: {pre_tax_amount:,.2f} $QSE\n"
                                f"Post-Gas Amount: {post_tax_amount:,.2f} $QSE\n"
                                f"Balance Before: {balance_before:,.2f} $QSE\n"
                                f"Balance After: {balance_after:,.2f} $QSE\n"
                                f"Timestamp: {timestamp}",
                    color=discord.Color.green() if action.startswith("Buy") else discord.Color.red()
                )

                # Send the log message as an embed to the specified channels
                await channel1.send(embed=embed)




async def log_transfer(self, ledger_conn, ctx, sender_name, receiver_name, receiver_id, amount, is_burn=False):
    self.transfer_timer_start = timeit.default_timer()
    guild_id = 1161678765894664323
    guild = ctx.bot.get_guild(guild_id)

    if receiver_id == PBot:
        pass
    else:

        if guild:
            P3Addr_sender = generate_crypto_address(ctx.author.id)
            P3Addr_receiver = generate_crypto_address(receiver_id)

            cursor = ledger_conn.cursor()
            cursor.execute("""
                INSERT INTO transfer_transactions (sender_id, receiver_id, amount)
                VALUES (?, ?, ?)
            """, (ctx.author.id, receiver_id, amount))
            ledger_conn.commit()

            channel1_id = ledger_channel

            channel1 = guild.get_channel(channel1_id)

            if channel1:
                embed = discord.Embed(
                    title=f"Transfer from {P3Addr_sender} to {P3Addr_receiver}",
                    description=f"Amount: {amount:,.2f} $QSE",
                    color=discord.Color.purple()
                )

                if is_burn:
                    embed.title = f"Burn of {amount:,.2f} $QSE"
                    embed.color = discord.Color.red()
                    embed.description = f"{sender_name} burned {amount:,.2f} $QSE"
                    # Add any additional fields for burn logs if needed

#                await channel1.send(embed=embed)
        elapsed_time = timeit.default_timer() - self.transfer_timer_start
        self.transfer_avg.append(elapsed_time)



async def log_stock_transfer(self, ledger_conn, ctx, sender, receiver, symbol, amount):
    self.transfer_timer_start = timeit.default_timer()
    try:
        guild_id = 1161678765894664323
        guild = ctx.bot.get_guild(guild_id)

        if amount == 0.0:
            return

        if guild:
            P3Addr_sender = "P3:0x00000000" if sender == "stakingYield" else generate_crypto_address(sender.id)
            P3Addr_receiver = generate_crypto_address(receiver) if isinstance(receiver, int) else generate_crypto_address(receiver.id)

            channel1_id = ledger_channel

            channel1 = guild.get_channel(channel1_id)

            if channel1:
                embed = discord.Embed(
                    title=f"Stock Transfer from {P3Addr_sender} to {P3Addr_receiver}",
                    description=f"Stock: {symbol}\nAmount: {amount:,.2f}",
                    color=discord.Color.purple()
                )

                await channel1.send(embed=embed)

    except Exception as e:
        print(f"Error while logging stock transfer: {e}")


    elapsed_time = timeit.default_timer() - self.transfer_timer_start
    self.transfer_avg.append(elapsed_time)

async def log_item_transaction(conn, ctx, action, item_name, quantity, total_cost, tax_amount, new_balance):
    guild_id = 1161678765894664323
    guild = ctx.bot.get_guild(guild_id)

    if guild:
        P3Addr = generate_crypto_address(ctx.author.id)

        total_cost_str = str(total_cost)
        tax_amount_str = str(tax_amount)
        new_balance_str = str(new_balance)

        timestamp = ctx.message.created_at.strftime("%Y-%m-%d %H:%M:%S")

        is_purchase = True if action == "Buy" else False

        channel1_id = ledger_channel


        channel1 = guild.get_channel(channel1_id)


        if channel1:
            embed = discord.Embed(
                title=f"{P3Addr} {'Purchase' if is_purchase else 'Sale'} of {quantity:,.2f} {item_name}",
                description=f"Item: {item_name}\nQuantity: {quantity:,.2f}\nTotal Cost: {total_cost:,.2f} $QSE\n"
                            f"Gas Amount: {tax_amount:,.2f} $QSE\nNew Balance: {new_balance:,.2f} $QSE\nTimestamp: {timestamp}",
                color=discord.Color.green() if is_purchase else discord.Color.red()
            )

            await channel1.send(embed=embed)




async def log_gambling_transaction(ledger_conn, ctx, game, bet_amount, win_loss, amount_after_tax):
    guild_id = 1161678765894664323
    guild = ctx.bot.get_guild(guild_id)

    if guild:
        P3Addr = generate_crypto_address(ctx.author.id)

        timestamp = ctx.message.created_at.strftime("%Y-%m-%d %H:%M:%S")

        conn = create_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO gambling_transactions (user_id, game, bet_amount, win_loss, amount_after_tax)
            VALUES (?, ?, ?, ?, ?)
        """, (ctx.author.id, game, bet_amount, win_loss, amount_after_tax))
        conn.commit()
        conn.close()

        channel1_id = ledger_channel

        channel1 = guild.get_channel(channel1_id)

        if channel1:
            embed = discord.Embed(
                title=f"{P3Addr} {game} Gambling Transaction",
                description=f"Game: {game}\nBet Amount: {bet_amount} $QSE\nWin/Loss: {win_loss}\n"
                            f"Amount Paid/Received After Gas: {amount_after_tax:,.2f} $QSE",
                color=discord.Color.orange() if win_loss.startswith("You won") else discord.Color.orange()
            )

            await channel1.send(embed=embed)

async def record_user_daily_buy(cursor, user_id, stock_name, amount):
    try:
        cursor.execute("""
            INSERT INTO user_daily_buys (user_id, symbol, amount, timestamp)
            VALUES (?, ?, ?, datetime('now'))
        """, (user_id, stock_name, amount))
    except sqlite3.Error as e:
        print(f"Error recording daily stock buy: {e}")

## End Ledger

def generate_crypto_address(user_id):
    # Concatenate a prefix (for simulation purposes) with the user ID
    data = f"P3:{user_id}"

    # Use a hash function (SHA-256) to generate a pseudo crypto address
    hashed_data = hashlib.sha256(data.encode()).hexdigest()[:10]

    return f"P3:{hashed_data}"

# Function to check if the user has already stored an address
def has_stored_address(conn, user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_addresses WHERE user_id=?", (str(user_id),))
    return cursor.fetchone() is not None

def is_vanity_address_unique(conn, vanity_address):
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM user_addresses WHERE vanity_address=?", (vanity_address,))
    count = cursor.fetchone()[0]
    return count == 0

def get_vanity_address(conn, user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT vanity_address FROM user_addresses WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

# Function to get P3 address from user ID
def get_p3_address(conn, user_id):
    cursor = conn.cursor()
    cursor.execute("SELECT p3_address FROM user_addresses WHERE user_id=?", (str(user_id),))
    result = cursor.fetchone()
    return result[0] if result else None

# Function to get user ID from P3 address
def get_user_id(conn, p3_address):
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM user_addresses WHERE p3_address=?", (p3_address,))
    result = cursor.fetchone()
    return int(result[0]) if result else None

def get_user_id_from_discord_username(conn, discord_username):
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM user_addresses WHERE p3_address=?", (discord_username,))
    result = cursor.fetchone()
    return result[0] if result else None

def get_user_id_from_input(conn, target):
    cursor = conn.cursor()

    # Check if the target is a mention
    if target.startswith('<@') and target.endswith('>'):
        target_id = int(target[2:-1])
        return str(target_id)

    # Check if the target is a P3 address
    cursor.execute("SELECT user_id FROM user_addresses WHERE p3_address=?", (target,))
    result = cursor.fetchone()
    if result:
        return result[0]

    # Assume the target is a user ID
    return target


def get_user_id_by_vanity(conn, vanity_address):
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM user_addresses WHERE vanity_address=?", (vanity_address,))
    result = cursor.fetchone()
    return result[0] if result else None
