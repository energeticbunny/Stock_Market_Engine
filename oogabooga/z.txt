from discord.ext import commands, tasksfrom discord import Embed, Colour, Filefrom tabulate import tabulatefrom datetime import datetime, timedelta, timezonefrom dateutil.relativedelta import relativedeltafrom decimal import Decimal, InvalidOperationfrom matplotlib.ticker import FuncFormatterfrom discord.utils import getfrom math import ceil, floorfrom sqlite3.dbapi2 import Connection, Cursorfrom contextlib import contextmanagerfrom functools import partialfrom typing import Unionfrom dbutils.pooled_db import PooledDBimport matplotlib.pyplot as pltimport matplotlib.pyplot as plt2import matplotlib.dates as mdatesimport matplotlib.ticker as tickerfrom matplotlib.animation import FuncAnimationfrom collections import defaultdictimport aiomysql.safrom aiomysql.sa import create_engineimport mplfinance as mpfimport numpy as npimport decimalimport sqlite3import randomimport discordimport timeimport asyncioimport ioimport jsonimport localeimport globimport shutilimport osimport pickleimport mathimport requestsimport typingimport reimport talibimport hashlibimport shleximport calendarimport matplotlibimport timeitimport statisticsimport aiosqliteimport uuidimport pytzmatplotlib.use('agg')# Hardcoded Variablesannouncement_channel_ids = [1093540470593962014, 1124784361766650026, 1124414952812326962]stockMin = 1baseMinPrice = 1stockMax = 10000000dStockLimit = 150000000 #2000000 standarddETFLimit = 5000000000000MAX_BALANCE = Decimal('5000000000000000000')resetQSE = 100dailyMin = 100000dailyMax = 500000000000ticketPrice = 100maxTax = 0.50minBet = 10000maxBet = 5_000_000_000_000last_buy_time = {}last_sell_time = {}user_transactions = {}user_locks = {}inverseStocks = ["ContrarianCraze", "PolyInverse", "LOL"]## One-time pass rolesbronze_pass = 1162473766656413987role_discount = 0.05etf_values = {    "5 minutes": None,    "15 minutes": None,    "30 minutes": None,    "1 hour": None,    "3 hours": None,    "6 hours": None,    "12 hours": None,    "24 hours": None,}#adminsjacob = 930513222820331590PBot = 1092870544988319905#Ledgerledger_channel = 1161680453841993839#serversP3 = 1087147399371292732SludgeSliders = 1121529633448394973OM3 = 1070860008868302858PBL = 1132202921589739540server1 = 1078544683971661944GUILD_ID = 1161678765894664323allowedServers = P3, SludgeSliders, OM3, PBL#### WORK# Define your token earning rangeMIN_EARNINGS = 25000MAX_EARNINGS = 500000## End Workdef setup_ledger():    try:        # Create a connection to the SQLite database with caching and paging        conn = sqlite3.connect("p3ledger.db", check_same_thread=False, isolation_level=None)        conn.execute("PRAGMA journal_mode=WAL;")        conn.execute("PRAGMA cache_size = 10000")  # Set cache size (adjust as needed)        conn.execute("PRAGMA page_size = 4096")   # Set page size (adjust as needed)        conn.execute("PRAGMA synchronous=NORMAL;")        cursor = conn.cursor()        # Create a table for stock transactions        cursor.execute("""            CREATE TABLE IF NOT EXISTS stock_transactions (                transaction_id INTEGER PRIMARY KEY,                user_id TEXT NOT NULL,                action TEXT NOT NULL,                symbol TEXT NOT NULL,                quantity INTEGER NOT NULL,                pre_tax_amount REAL NOT NULL,                post_tax_amount REAL NOT NULL,                balance_before REAL NOT NULL,                balance_after REAL NOT NULL,                price NUMERIC(20, 10) NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP            )        """)        # Add an index on user_id and symbol for faster retrieval        cursor.execute("""            CREATE INDEX idx_symbol_action_timestamp            ON stock_transactions (symbol, action, timestamp);        """)        # Create a table for transfer transactions        cursor.execute("""            CREATE TABLE IF NOT EXISTS transfer_transactions (                transaction_id INTEGER PRIMARY KEY,                sender_id TEXT NOT NULL,                receiver_id TEXT NOT NULL,                amount REAL NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP            )        """)        # Create a table for stock burning transactions        cursor.execute("""            CREATE TABLE IF NOT EXISTS stock_burning_transactions (                transaction_id INTEGER PRIMARY KEY,                user_id TEXT NOT NULL,                stock_name TEXT NOT NULL,                quantity INTEGER NOT NULL,                price_before REAL NOT NULL,                price_after REAL NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP           )        """)        # Create a table for gambling transactions        cursor.execute("""            CREATE TABLE IF NOT EXISTS gambling_transactions (                transaction_id INTEGER PRIMARY KEY,                user_id TEXT NOT NULL,                game TEXT NOT NULL,                bet_amount REAL NOT NULL,                win_loss TEXT NOT NULL,                amount_after_tax REAL NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP            )        """)        # Create a table for stock transfers        cursor.execute("""            CREATE TABLE IF NOT EXISTS stock_transfer_transactions (                id INTEGER PRIMARY KEY,                sender_id INTEGER NOT NULL,                receiver_id INTEGER NOT NULL,                symbol TEXT NOT NULL,                amount INTEGER NOT NULL,                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP            )        """)        # Commit the changes and close the connection        conn.commit()        conn.close()        print("Ledger created successfully")    except sqlite3.Error as e:        # Handle the database error        print(f"Database error: {e}")    except Exception as e:        # Handle unexpected errors        print(f"An unexpected error occurred: {e}")def create_vip_table():    conn = sqlite3.connect("VIP.db")    cursor = conn.cursor()    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_transactions (                transaction_id INTEGER PRIMARY KEY,                user_id TEXT,                etf_id INTEGER,                transaction_type TEXT,                amount REAL,                tax_amount REAL,                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP            )        """)    except sqlite3.Error as e:        # Handle any errors, if necessary        print(f"Error creating etf_transactions table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_percentages (                role_id INTEGER PRIMARY KEY,                role_name TEXT,                percentage REAL            )        """)    except sqlite3.Error as e:        # Handle any errors, if necessary        print(f"Error creating etf_percentages table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS treasure_percentages (                role_id INTEGER PRIMARY KEY,                role_name TEXT,                percentage REAL            )        """)    except sqlite3.Error as e:        # Handle any errors, if necessary        print(f"Error creating treasure_percentages table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS daily_stock_percentages (                role_id INTEGER PRIMARY KEY,                role_name TEXT,                percentage REAL            )        """)    except sqlite3.Error as e:        # Handle any errors, if necessary        print(f"Error creating daily_stock_percentages table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS weekly_tax_distribution (                distribution_id INTEGER PRIMARY KEY,                etf_id INTEGER,                role_id INTEGER,                total_tax REAL,                distributed_amount REAL,                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP            )        """)    except sqlite3.Error as e:        # Handle any errors, if necessary        print(f"Error creating weekly_tax_distribution table: {e}")    finally:        conn.commit()        conn.close()def create_p3addr_table():    # Connect to the database    conn = sqlite3.connect("P3addr.db")    conn.execute("PRAGMA journal_mode=WAL;")    conn.execute("PRAGMA cache_size = 10000")  # Set cache size (adjust as needed)    conn.execute("PRAGMA page_size = 4096")   # Set page size (adjust as needed)    conn.execute("PRAGMA synchronous=NORMAL;")    # Create a cursor object to execute SQL commands    cursor = conn.cursor()    # Execute the SQL command to create the table    cursor.execute('''        CREATE TABLE IF NOT EXISTS user_addresses (            user_id TEXT PRIMARY KEY,            p3_address TEXT NOT NULL,            vanity_address TEXT NOT NULL DEFAULT ''        )    ''')    # Commit the changes and close the connection    print("P3 Address Database Created")    conn.commit()    conn.close()def setup_database():    conn = sqlite3.connect("currency_system.db")    conn.execute("PRAGMA journal_mode=WAL;")    conn.execute("PRAGMA cache_size = 10000")  # Set cache size (adjust as needed)    conn.execute("PRAGMA page_size = 4096")   # Set page size (adjust as needed)    conn.execute("PRAGMA synchronous=NORMAL;")    conn.row_factory = sqlite3.Row    cursor = conn.cursor()    # Add available column to stocks table if not exists    cursor.execute("PRAGMA table_info(stocks)")    columns = cursor.fetchall()    if 'available' not in [column[1] for column in columns]:        cursor.execute("ALTER TABLE stocks ADD COLUMN available INT")    # Create 'users' table    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users (                user_id INTEGER PRIMARY KEY,                balance BLOB NOT NULL            )        """)        cursor.execute("CREATE INDEX IF NOT EXISTS idx_users_user_id ON users(user_id);")    except sqlite3.Error as e:        print(f"An error occurred while creating the 'users' table: {e}")    # Create 'raffle_tickets' table    try:        cursor.execute('''            CREATE TABLE IF NOT EXISTS raffle_tickets (                user_id INTEGER PRIMARY KEY,                quantity INTEGER,                timestamp INTEGER            )        ''')        cursor.execute("CREATE INDEX IF NOT EXISTS idx_raffle_tickets_user_id ON raffle_tickets(user_id);")    except sqlite3.Error as e:        print(f"An error occurred while creating the 'raffle_tickets' table: {e}")    # Create 'stocks' table    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS stocks (                symbol TEXT PRIMARY KEY,                available INTEGER64 NOT NULL,                price NUMERIC(20, 10) NOT NULL,                QSE_required INTEGER NOT NULL,                QSE_rewarded INTEGER NOT NULL            )        """)        cursor.execute("CREATE INDEX IF NOT EXISTS idx_stocks_symbol ON stocks(symbol);")        cursor.execute("CREATE INDEX IF NOT EXISTS idx_stocks_price ON stocks(price);")    except sqlite3.Error as e:        print(f"An error occurred while creating the 'stocks' table: {e}")    # Create 'user_stocks' table    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_stocks (                user_id INTEGER NOT NULL,                symbol TEXT NOT NULL,                amount REAL NOT NULL,                action TEXT NOT NULL,                timestamp TEXT NOT NULL,                FOREIGN KEY (symbol) REFERENCES stocks(symbol),                PRIMARY KEY (user_id, symbol)            )        """)        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_stocks_user_id ON user_stocks(user_id);")        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_stocks_symbol ON user_stocks(symbol);")    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_stocks' table: {e}")    try:        cursor.execute('''            CREATE TABLE IF NOT EXISTS etfs (                etf_id INTEGER PRIMARY KEY,                name TEXT NOT NULL,                description TEXT,                value REAL NOT NULL DEFAULT 0             )         ''')    except sqlite3.Error as e:        print(f"An error occurred while creating the 'etfs' table: {e}")    try:       cursor.execute('''           CREATE TABLE IF NOT EXISTS etf_stocks (                etf_id INTEGER NOT NULL,                symbol TEXT NOT NULL,                quantity INTEGER NOT NULL,                FOREIGN KEY (etf_id) REFERENCES etfs(etf_id),                FOREIGN KEY (symbol) REFERENCES stocks(symbol),                PRIMARY KEY (etf_id, symbol)            )        ''')    except sqlite3.Error as e:        print(f"An error occurred while creating the 'etf_stocks' table: {e}")    try:        cursor.execute('''            CREATE TABLE IF NOT EXISTS user_etfs (                user_id INTEGER NOT NULL,                etf_id INTEGER NOT NULL,                quantity INTEGER NOT NULL,                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (etf_id) REFERENCES etfs(etf_id),                PRIMARY KEY (user_id, etf_id)            )        ''')    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_etfs' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS metrics (                metric_id INTEGER PRIMARY KEY AUTOINCREMENT,                metric_name TEXT NOT NULL,                metric_value INTEGER NOT NULL            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'metrics' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS tax_distribution (                id INTEGER PRIMARY KEY,                user_id INTEGER,                tax_amount DECIMAL(18, 2),                distribution_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP            );        """)        print("Table 'tax_distribution' created successfully.")    except sqlite3.Error as e:        print(f"Error creating table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS limit_orders (                order_id INTEGER PRIMARY KEY AUTOINCREMENT,                user_id INTEGER NOT NULL,                symbol TEXT NOT NULL,                order_type TEXT NOT NULL,                price REAL NOT NULL,                quantity INTEGER NOT NULL,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (symbol) REFERENCES stocks(symbol),                CREATE INDEX idx_limit_orders_symbol_order_type_price_created_at                ON limit_orders (symbol, order_type, price, created_at);            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'limit_orders' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_market (                order_id INTEGER PRIMARY KEY AUTOINCREMENT,                user_id INTEGER NOT NULL,                item TEXT NOT NULL,                order_type TEXT NOT NULL,                price REAL NOT NULL,                quantity INTEGER NOT NULL,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                FOREIGN KEY (user_id) REFERENCES users(user_id),                CREATE INDEX idx_user_market_item_order_type_price_created_at                ON user_market (item, order_type, price, created_at);            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_market' table: {e}")    try:        cursor.execute('''            CREATE TABLE IF NOT EXISTS items (                item_id INTEGER PRIMARY KEY,                item_name TEXT NOT NULL,                item_description TEXT,                price DECIMAL(18, 2) NOT NULL,                is_usable INTEGER NOT NULL DEFAULT 0            )        ''')        cursor.execute('''            CREATE TABLE IF NOT EXISTS inventory (                user_id INTEGER NOT NULL,                item_id INTEGER NOT NULL,                quantity INTEGER NOT NULL DEFAULT 0,                PRIMARY KEY (user_id, item_id),                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (item_id) REFERENCES items(item_id)            )        ''')        cursor.execute('''            CREATE TABLE IF NOT EXISTS transactions (                transaction_id INTEGER PRIMARY KEY,                user_id INTEGER NOT NULL,                item_id INTEGER NOT NULL,                quantity INTEGER NOT NULL,                total_cost DECIMAL(18, 2) NOT NULL,                tax_amount DECIMAL(18, 2) NOT NULL,                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (item_id) REFERENCES items(item_id)            )        ''')        print("Table 'Marketplace' created successfully.")    except sqlite3.Error as e:        print(f"Error executing SQL query: {e}")    try:        # Create stock_metrics table if not exists        cursor.execute('''            CREATE TABLE IF NOT EXISTS stock_metrics (                metric_id INTEGER PRIMARY KEY,                stock_name TEXT NOT NULL,                date_recorded DATE NOT NULL,                open_price REAL NOT NULL,                close_price REAL NOT NULL,                high_price REAL NOT NULL,                low_price REAL NOT NULL,                volume INTEGER NOT NULL            )        ''')    except sqlite3.Error as e:        print(f"An error occurred while creating the 'stock_metrics' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS trading_teams (                team_id INTEGER PRIMARY KEY AUTOINCREMENT,                name TEXT NOT NULL,                total_profit_loss DECIMAL DEFAULT 0            );        """)        cursor.execute("""            CREATE TABLE IF NOT EXISTS team_members (                user_id INTEGER,                team_id INTEGER,                FOREIGN KEY (team_id) REFERENCES trading_teams(team_id),                PRIMARY KEY (user_id, team_id)            );        """)        print("Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS team_transactions (                transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,                team_id INTEGER,                symbol TEXT,                amount INTEGER,                price DECIMAL,                type TEXT, -- "buy" or "sell"                FOREIGN KEY (team_id) REFERENCES trading_teams(team_id)            );        """)        print("Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_daily_buys (                user_id INTEGER,                symbol TEXT,                amount INTEGER,                timestamp DATETIME            );        """)        print("Stock Limit created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_daily_sells (                user_id INTEGER,                symbol TEXT,                amount INTEGER,                timestamp DATETIME            );        """)        print("Daily Sells Limit created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS burn_history (                user_id TEXT NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP            );        """)        print("Burn Limit created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS item_usage (                user_id TEXT NOT NULL,                item_name TEXT NOT NULL,                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                PRIMARY KEY (user_id, item_name)            );        """)        print("Item limit created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS swap_orders (                id INTEGER PRIMARY KEY AUTOINCREMENT,                user_id INTEGER,                stock1 TEXT,                amount1 INTEGER,                stock2 TEXT,                amount2 INTEGER,                status TEXT CHECK (status IN ('open', 'matched')),                FOREIGN KEY (stock1) REFERENCES stocks(symbol),                FOREIGN KEY (stock2) REFERENCES stocks(symbol)            )        """)        print("Swap Orders created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        # Create Users table if not exists        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_wallets (                user_id INTEGER PRIMARY KEY,                wallet_address TEXT NOT NULL,                p3_address TEXT NOT NULL            )        """)        print("WalletConnect created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        # Create user_stakes table if not exists        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_stakes (                user_id INTEGER,                nft TEXT NOT NULL,                tokenid TEXT NOT NULL,                stake_timestamp TEXT,                PRIMARY KEY (user_id, nft, tokenid),                FOREIGN KEY (user_id) REFERENCES user_wallets (user_id)            )        """)        print("user_stakes table created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the user_stakes table: {e}")    try:        # Create a table to store user deposits        cursor.execute('''            CREATE TABLE IF NOT EXISTS deposits (                user_id INTEGER,                lock_duration INTEGER,                amount REAL,                interest_rate REAL,                start_date TIMESTAMP,                PRIMARY KEY (user_id, lock_duration)            );        ''')    except sqlite3.Error as e:        print(f"An error occurred: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users_level (                user_id INTEGER PRIMARY KEY,                level INTEGER NOT NULL DEFAULT 1,                experience INTEGER NOT NULL DEFAULT 0            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_level' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users_rpg_stats (                user_id INTEGER PRIMARY KEY,                cur_hp INTEGER NOT NULL DEFAULT 10,                max_hp INTEGER NOT NULL DEFAULT 10,                atk INTEGER NOT NULL DEFAULT 1,                def INTEGER NOT NULL DEFAULT 1,                eva INTEGER NOT NULL DEFAULT 1,                luck INTEGER NOT NULL DEFAULT 1,                chr INTEGER NOT NULL DEFAULT 1,                spd INTEGER NOT NULL DEFAULT 1            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_stats' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users_rpg_metrics (                user_id INTEGER PRIMARY KEY,                kills INTEGER NOT NULL DEFAULT 0,                deaths INTEGER NOT NULL DEFAULT 0,                heals INTEGER NOT NULL DEFAULT 0,                healed INTEGER NOT NULL DEFAULT 0            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_rpg_metrics' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users_rpg_inventory (                user_id INTEGER PRIMARY KEY,                firearm TEXT NOT NULL DEFAULT None,                ammo TEXT NOT NULL DEFAULT None,                bodyarmor TEXT NOT NULL DEFAULT None,                medpack TEXT NOT NULL DEFAULT None            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_rpg_inventory' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS users_rpg_cities (                user_id INTEGER PRIMARY KEY,                current_city TEXT NOT NULL DEFAULT 'StellarHub',                last_city TEXT NOT NULL DEFAULT None,                traveling TEXT NOT NULL DEFAULT 'No',                timestamp TIMESTAMP NOT NULL DEFAULT None            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_rpg_cities' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_city_stats (                city TEXT PRIMARY KEY,                QSE TEXT NOT NULL DEFAULT 0,                Resources INTEGER NOT NULL DEFAULT 0,                Stocks INTEGER NOT NULL DEFAULT 0,                ETPs INTEGER NOT NULL DEFAULT 0            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'user_city_stats' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS updown_orders (                user_id INTEGER NULL DEFAULT None,                asset TEXT NOT NULL DEFAULT None,                current_price INTEGER NOT NULL DEFAULT None,                quantity INTEGER NOT NULL DEFAULT None,                lower_limit INTEGER NOT NULL DEFAULT None,                upper_limit INTEGER NOT NULL DEFAULT None,                contract_date TIMESTAMP NOT NULL DEFAULT None,                expiration TIMESTAMP NOT NULL DEFAULT None,                order_id INTEGER NOT NULL DEFAULT None            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'updown_orders' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS futures_orders (                order_id INTEGER PRIMARY KEY AUTOINCREMENT,                user_id INTEGER NOT NULL,                symbol TEXT NOT NULL,                order_type TEXT NOT NULL,  -- 'buy' or 'sell'                price REAL NOT NULL,                quantity INTEGER NOT NULL,                expiration TIMESTAMP NOT NULL,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (symbol) REFERENCES stocks(symbol)            )        """)    except sqlite3.Error as e:        print(f"An error occurred while creating the 'futures_orders' table: {e}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS market_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("MV Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS reserve_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                qse TEXT NOT NULL,                stocks TEXT NOT NULL,                total TEXT NOT NULL            );        """)        print("Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS banks (                bank_id INTEGER PRIMARY KEY AUTOINCREMENT,                bank_name TEXT NOT NULL,                qse_stored REAL NOT NULL,                stock_value_stored REAL NOT NULL,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP            );        """)        cursor.execute("""CREATE INDEX IF NOT EXISTS idx_banks_bank_name ON banks (bank_name);""")        print("Banks created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS user_accounts (                account_id INTEGER PRIMARY KEY AUTOINCREMENT,                user_id INTEGER NOT NULL,                bank_id INTEGER NOT NULL,                qse_balance REAL NOT NULL,                stock_assets TEXT,                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,                FOREIGN KEY (user_id) REFERENCES users(user_id),                FOREIGN KEY (bank_id) REFERENCES banks(bank_id)            );        """)        cursor.execute("""CREATE INDEX IF NOT EXISTS idx_user_accounts_user_id ON user_accounts (user_id);""")        print("User Account Banks created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_1_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 1 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_2_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 2 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_3_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 3 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_4_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 4 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_7_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 7 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_8_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 8 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_9_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 9 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_10_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 10 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_11_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 11 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_12_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 12 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_13_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 13 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_14_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 14 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS etf_15_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                MV TEXT NOT NULL            );        """)        print("ETF 15 Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute("""            CREATE TABLE IF NOT EXISTS metal_value (                id INTEGER PRIMARY KEY AUTOINCREMENT,                Gold TEXT NOT NULL,                Silver TEXT NOT NULL,                Lithium TEXT NOT NULL,                Copper TEXT NOT NULL,                Platinum TEXT NOT NULL            );        """)        print("Metals Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        cursor.execute('''            CREATE TABLE IF NOT EXISTS etf_shares (                etf_id INTEGER NOT NULL,                available INTEGER NOT NULL DEFAULT 0,                total INTEGER NOT NULL DEFAULT 0            );        ''')        print("ETF Shares Tables created successfully")    except sqlite3.Error as e:        print(f"An error occurred while creating the tables: {str(e)}")    try:        # Liquidity Pool Schema        cursor.execute('''            CREATE TABLE IF NOT EXISTS LiquidityPool (                pool_id INTEGER PRIMARY KEY AUTOINCREMENT,                asset1_id INTEGER NOT NULL,                asset2_id INTEGER NOT NULL,                asset1_amount REAL NOT NULL,                asset2_amount REAL NOT NULL            )        ''')        # User Positions Schema        cursor.execute('''            CREATE TABLE IF NOT EXISTS UserPositions (                user_id INTEGER NOT NULL,                asset_id INTEGER NOT NULL,                amount REAL NOT NULL            )        ''')        print("Tables created successfully.")    except sqlite3.Error as e:        print(f"An error occurred: {e}")    conn.commit()    return connsetup_database()setup_ledger()create_p3addr_table()create_vip_table()#LP# Function to add a record to the LiquidityPool tableasync def add_to_liquidity_pool(self, asset1_id, asset2_id, asset1_amount, asset2_amount):    try:        cursor = self.conn.cursor()        cursor.execute('''            INSERT INTO LiquidityPool (asset1_id, asset2_id, asset1_amount, asset2_amount)            VALUES (?, ?, ?, ?)        ''', (asset1_id, asset2_id, asset1_amount, asset2_amount))        self.conn.commit()        print("Added to LiquidityPool successfully.")    except sqlite3.Error as e:        print(f"An error occurred: {e}")# Function to remove a record from the LiquidityPool tableasync def remove_from_liquidity_pool(self, pool_id):    try:        cursor = self.conn.cursor()        cursor.execute('''            DELETE FROM LiquidityPool WHERE pool_id=?        ''', (pool_id,))        self.conn.commit()        print("Removed from LiquidityPool successfully.")    except sqlite3.Error as e:        print(f"An error occurred: {e}")# Function to update a record in the LiquidityPool tableasync def update_liquidity_pool(self, pool_id, asset1_amount, asset2_amount):    try:        cursor = self.conn.cursor()        cursor.execute('''            UPDATE LiquidityPool SET asset1_amount=?, asset2_amount=? WHERE pool_id=?        ''', (asset1_amount, asset2_amount, pool_id))        self.conn.commit()        print("Updated LiquidityPool successfully.")    except sqlite3.Error as e:        print(f"An error occurred: {e}")def debug_buy_wrapper(type, symbol, amount, user_id, p3addr):    # Define the width of the ASCII window    window_width = 50    # Clear the console for a clean display (optional)#    print('\033c', end='')    # Display the debug information in an ASCII window    print("+" + "-" * (window_width - 2) + "+")    print(f"|{'Debug Buy Wrapper':^{window_width - 2}}|")    print("+" + "-" * (window_width - 2) + "+")    print(f"| Type: {type:<{window_width - 7}} |")    print(f"| Asset: {symbol:<{window_width - 9}} |")    print(f"| Quantity: {amount:,.0f} :<{window_width - 16} |")    print(f"| UserID: {user_id:<{window_width - 10}} |")    print(f"| P3 Address: {p3addr:<{window_width - 14}} |")    print("+" + "-" * (window_width - 2) + "+")def print_minted_details(mint, stock_name, old_price, current_price, market, new_market, total, new_total):    # Define the width of the ASCII-like window    window_width = 50    # Clear the console for a clean display (optional)#    print('\033c', end='')    # Construct the formatted output with ASCII-like layout    print("+" + "-" * (window_width - 2) + "+")    print(f"|{'Minted Details':^{window_width - 2}}|")    print("+" + "-" * (window_width - 2) + "+")    print(f"| Minted {mint:,.0f} to {stock_name:<{window_width - 15}} |")    print(f"| Price: {old_price:,.2f} -> {current_price:,.2f}{' ' * (window_width - 31)} |")    print(f"| {market:,.0f} -> {new_market:,.0f}{' ' * (window_width - 24)} |")    print(f"| {total:,.0f} -> {new_total:,.0f}{' ' * (window_width - 24)} |")    print("+" + "-" * (window_width - 2) + "+")def print_transaction_buy_market(current_balance, new_balance, total_cost):    # Define the width of the ASCII-like debug window    window_width = 50    # Construct the formatted output with ASCII-like layout    print("+" + "-" * (window_width - 2) + "+")    print(f"|{'Transaction Buy Market':^{window_width - 2}}|")    print("+" + "-" * (window_width - 2) + "+")    print(f"| Current Balance: {current_balance:,.2f}{' ' * (window_width - 21)} |")    print(f"| New Balance: {new_balance:,.2f}{' ' * (window_width - 17)} |")    print(f"| Total Cost: {total_cost:,.2f}{' ' * (window_width - 17)} |")    print(f"| Balance After Transaction: {(current_balance - total_cost):,.2f}{' ' * (window_width - 34)} |")    print("+" + "-" * (window_width - 2) + "+")def print_stock_info(stock_name, locked, total, market, reserve, escrow):    # Calculate reserve percentage    reserve_per = (locked / total) * 100    # Define the width of the ASCII window    window_width = 50    # Clear the console for a clean display (optional)#    print('\033c', end='')    # Display the stock information in an ASCII window    print("+" + "-" * (window_width - 2) + "+")    print(f"|{'Stock Information':^{window_width - 2}}|")    print("+" + "-" * (window_width - 2) + "+")    print(f"| Stock: {stock_name:<{window_width - 10}} |")    print(f"| Locked: {locked:,.0f} ({reserve_per:.10f}%):<{window_width - 19} |")    print(f"| Market: {market:,.0f} :<{window_width - 14} |")    print(f"| Reserve: {reserve:,.0f} :<{window_width - 15} |")    print(f"| Escrow: {escrow:,.0f} :<{window_width - 14} |")    print("+" + "-" * (window_width - 2) + "+")def print_order_placed(order_user_id, order_asset, order_type, order_price, market_price, order_quantity, order_length, get_p3_address):    # Calculate market price    mp = float(market_price)    # Define the width of the ASCII window    window_width = 50    # Clear the console for a clean display (optional)#    print('\033c', end='')    # Get the P3 address using the provided function    user_p3_address = get_p3_address    # Format and display the order information in an ASCII window    print("+" + "-" * (window_width - 2) + "+")    print(f"|{'Order Placed':^{window_width - 2}}|")    print("+" + "-" * (window_width - 2) + "+")    print(f"| User: {user_p3_address[:window_width - 9]:<{window_width - 9}} |")    print(f"| Asset: {order_asset:<{window_width - 9}} |")    print(f"| Type: {order_type:<{window_width - 8}} |")    print(f"| Order Price: {int(order_price):,}:<{window_width - 15} |")    print(f"| Market Price: ({mp:.2f}):<{window_width - 15} |")    print(f"| Quantity: {int(order_quantity):,}:<{window_width - 12} |")    print(f"| Order Block Length: {order_length:,}:<{window_width - 21} |")    print("+" + "-" * (window_width - 2) + "+")# Function to read records from the LiquidityPool tabledef read_liquidity_pool(self):    try:        cursor = self.conn.cursor()        cursor.execute('SELECT * FROM LiquidityPool')        records = cursor.fetchall()        for record in records:            print(record)  # Or you can return the records if needed    except sqlite3.Error as e:        print(f"An error occurred: {e}")async def is_trading_hours():    # Get current time in EST timezone    est = pytz.timezone('US/Eastern')    current_time_est = datetime.now(est)    # Check if it's between 7 AM and 7 PM EST    if current_time_est.hour >= 7 and current_time_est.hour < 19:  # 7 AM to 7 PM EST        # Check if it's a weekday (Monday=0, Sunday=6)        if current_time_est.weekday() < 5:  # Weekday (Monday to Friday)            return True, "Weekday"        else:            return True, "Weekend"    else:        return False, Noneasync def insert_etf_shares(self, etf_id, available, total):    try:        # Connect to the database        cursor = self.conn.cursor()        # Insert a new record into the etf_shares table        cursor.execute("INSERT INTO etf_shares (etf_id, available, total) VALUES (?, ?, ?)", (etf_id, available, total))        # Commit the transaction        self.conn.commit()        print("Record inserted successfully.")    except sqlite3.Error as e:        print(f"Error occurred: {e}")async def update_etf_shares(self, etf_id, available):    try:        # Connect to the database        cursor = self.conn.cursor()        # Update the available shares for the given ETF ID        cursor.execute("UPDATE etf_shares SET available = ? WHERE etf_id = ?", (available, etf_id))        # Commit the transaction        self.conn.commit()        print("Shares updated successfully.")    except sqlite3.Error as e:        print(f"Error occurred: {e}")async def get_available_etf_shares(self, etf_id):    try:        # Connect to the database        cursor = self.conn.cursor()        # Execute the SELECT query to retrieve available shares for the given ETF ID        cursor.execute("SELECT available FROM etf_shares WHERE etf_id = ?", (etf_id,))        result = cursor.fetchone()        # Check if the result is not None        if result is not None:            # Return the available shares            return result[0]        else:            # If the result is None, the ETF ID might not exist in the table            print("ETF ID not found.")            return None    except sqlite3.Error as e:        print(f"Error occurred: {e}")        return Noneasync def get_total_etf_shares(self, etf_id):    try:        # Connect to the database        cursor = self.conn.cursor()        # Execute the SELECT query to retrieve available shares for the given ETF ID        cursor.execute("SELECT total FROM etf_shares WHERE etf_id = ?", (etf_id,))        result = cursor.fetchone()        # Check if the result is not None        if result is not None:            # Return the available shares            return result[0]        else:            # If the result is None, the ETF ID might not exist in the table            print("ETF ID not found.")            return None    except sqlite3.Error as e:        print(f"Error occurred: {e}")        return None